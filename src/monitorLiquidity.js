import { PublicKey } from '@solana/web3.js';
import { connection } from '../config.js';
import { checkTokenSafety } from './checkTokenSafety.js';
import { apiSwap } from './swap_base-in.js';
import { logWithTimestamp } from './logger.js';

const RAYDIUM_AMM_PROGRAM_ID = new PublicKey('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8');

let rightToken = null;
export { rightToken };

export async function monitorLiquidity() {
    try {
        logWithTimestamp('–ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏...');

        connection.onLogs(
            RAYDIUM_AMM_PROGRAM_ID,
            async (logInfo) => {
                try {
                    const { signature, logs } = logInfo;
            
                    if (logs.some((log) => log.includes('initialize2'))) {
                        logWithTimestamp(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: https://solscan.io/tx/${signature}`);
                
                        const tx = await connection.getTransaction(signature, {
                            commitment: 'confirmed',
                            maxSupportedTransactionVersion: 0,
                        });
                
                        if (tx && tx.meta && tx.meta.postTokenBalances && tx.meta.postTokenBalances.length >= 2) {
                            const token1 = tx.meta.postTokenBalances[0].mint;
                            const token2 = tx.meta.postTokenBalances[1].mint;
                
                            if (token1 !== 'So11111111111111111111111111111111111111112') {
                                rightToken = token1;
                            } else if (token2 !== 'So11111111111111111111111111111111111111112') {
                                rightToken = token2;
                            } else {
                                logWithTimestamp('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π —Ç–æ–∫–µ–Ω');
                                return;
                            }
                
                            logWithTimestamp(`–ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω ${rightToken}`);
                
                            const safetyCheck = await checkTokenSafety(rightToken);
                            if (!safetyCheck.safe) {
                                logWithTimestamp(`‚ùå –¢–æ–∫–µ–Ω ${rightToken} –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ò—â—É —Å–ª–µ–¥—É—é—â–∏–π –ø—É–ª...`);
                                return;
                            }
                
                            logWithTimestamp(`‚úÖ –¢–æ–∫–µ–Ω ${rightToken} –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–≤–∞–ø...`);
                
                            try {
                                await apiSwap(rightToken);
                                logWithTimestamp(`üéâ –°–≤–∞–ø —Ç–æ–∫–µ–Ω–∞ ${rightToken} –∑–∞–≤–µ—Ä—à—ë–Ω!`);
                            } catch (swapError) {
                                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–≤–∞–ø–∞ —Ç–æ–∫–µ–Ω–∞ ${rightToken}:`, swapError);
                            }
                
                            logWithTimestamp('--------------------–ò—â—É —Å–ª–µ–¥—É—é—â–∏–π –ø—É–ª...--------------------');
                        } else {
                            logWithTimestamp('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ò—â—É —Å–ª–µ–¥—É—é—â–∏–π –ø—É–ª...');
                        }
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:', error.message);      
                }
            
            },
            'confirmed'
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:', error);
    }
}

