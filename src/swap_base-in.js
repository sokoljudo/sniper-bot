import { Transaction, VersionedTransaction, sendAndConfirmTransaction } from '@solana/web3.js';
import { NATIVE_MINT } from '@solana/spl-token';
import axios from 'axios';
import { connection, owner, fetchTokenAccountData } from '../config.js';
import { API_URLS } from '@raydium-io/raydium-sdk-v2';
import { logWithTimestamp } from './logger.js';

export const apiSwap = async (rightToken) => {
  try {
    logWithTimestamp(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–≤–∞–ø —Ç–æ–∫–µ–Ω–∞: ${rightToken}`);

    const inputMint = NATIVE_MINT.toBase58();
    const outputMint = rightToken;
    const amount = 10000000; 
    const slippage = 50; 
    const txVersion = 'V0'; 
    const isV0Tx = txVersion === 'V0';

    const [isInputSol, isOutputSol] = [inputMint === NATIVE_MINT.toBase58(), outputMint === NATIVE_MINT.toBase58()];

    const { tokenAccounts } = await fetchTokenAccountData();
    const inputTokenAcc = tokenAccounts.find((a) => a.mint.toBase58() === inputMint)?.publicKey;
    const outputTokenAcc = tokenAccounts.find((a) => a.mint.toBase58() === outputMint)?.publicKey;

    if (!inputTokenAcc && !isInputSol) {
      console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.');
      return;
    }

    logWithTimestamp(`üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ Raydium API...`);
    const { data } = await axios.get(`${API_URLS.BASE_HOST}${API_URLS.PRIORITY_FEE}`);
    logWithTimestamp('‚úÖ –ö–æ–º–∏—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞');

    logWithTimestamp(`üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Raydium API –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ —Å–≤–∞–ø–∞...`);
    const { data: swapResponse } = await axios.get(
      `${API_URLS.SWAP_HOST}/compute/swap-base-in?inputMint=${inputMint}&outputMint=${outputMint}&amount=${amount}&slippageBps=${
        slippage * 100
      }&txVersion=${txVersion}`
    );
    logWithTimestamp('‚úÖ –î–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞ —Å–≤–∞–ø–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã');

    logWithTimestamp(`üì° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Å–≤–∞–ø–∞...`);
    const { data: swapTransactions } = await axios.post(`${API_URLS.SWAP_HOST}/transaction/swap-base-in`, {
      computeUnitPriceMicroLamports: String(data.data.default.h),
      swapResponse,
      txVersion,
      wallet: owner.publicKey.toBase58(),
      wrapSol: isInputSol,
      unwrapSol: isOutputSol,
      inputAccount: isInputSol ? undefined : inputTokenAcc?.toBase58(),
      outputAccount: isOutputSol ? undefined : outputTokenAcc?.toBase58(),
    });
    logWithTimestamp(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Å–≤–∞–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã`);

    logWithTimestamp(`üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±—É—Ñ–µ—Ä...`);
    const allTxBuf = swapTransactions.data.map((tx) => Buffer.from(tx.transaction, 'base64'));
    const allTransactions = allTxBuf.map((txBuf) =>
      isV0Tx ? VersionedTransaction.deserialize(txBuf) : Transaction.from(txBuf)
    );
    logWithTimestamp(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${allTransactions.length}`);

    let idx = 0;
    if (!isV0Tx) {
      for (const tx of allTransactions) {
        try {
          logWithTimestamp(`üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é #${++idx}...`);
          tx.sign(owner);
          const txId = await sendAndConfirmTransaction(connection, tx, [owner], { skipPreflight: true });
          logWithTimestamp(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${idx} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, ID: ${txId}`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ #${idx}:`, error);
        }
      }
    } else {
      for (const tx of allTransactions) {
        try {
          idx++;
          logWithTimestamp(`üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é #${idx}...`);
          tx.sign([owner]);
          const txId = await connection.sendTransaction(tx, { skipPreflight: true });
          const { lastValidBlockHeight, blockhash } = await connection.getLatestBlockhash({
            commitment: 'finalized',
          });
          logWithTimestamp(`‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${idx} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞`);
          await connection.confirmTransaction(
            {
              blockhash,
              lastValidBlockHeight,
              signature: txId,
            },
            'confirmed'
          );
          logWithTimestamp(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #${idx} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: https://solscan.io/tx/${txId}`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ #${idx}:`, error);
        }
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–≤–∞–ø–∞:', error);
  }
};
